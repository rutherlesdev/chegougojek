var CryptoJS = require("crypto-js");
var fs = require('fs');
var path = require('path');

var Cypherkey = "";
var Type = "";
var key_size = "";

function IsValidAESType(AESType) {
    switch (AESType.toString()) {
        case "128":
            Type = 128;
            key_size = 16;
            break;
        case "192":
            Type = 192;
            key_size = 24;
            break;
        case "256":
            Type = 256;
            key_size = 32;
            break;
    }
    if (key_size && key_size != "") {
        return true;
    }
    else {
        return false;
    }
}

var YalgaarEncrypt = function (data) {
    if (Cypherkey) {
        var encryptedText = encrypt(data, Cypherkey);
        return encryptedText;
    }
    else {
        return data;
    }
}

var YalgaarDecrypt = function (data) {
    if (Cypherkey) {
        var decryptedText = decrypt(data, Cypherkey);
        return decryptedText;
    }
    else {
        return data;
    }
}

var encrypt = function (plainText, key) {
    key = String(key + "00000000000000000000000000000000").slice(0, key_size);
    var C = CryptoJS;
    plainText = C.enc.Utf8.parse(plainText);
    key = C.enc.Utf8.parse(key);
    var aes = C.algo.AES.createEncryptor(key, {
        mode: C.mode.CBC,
        padding: C.pad.Pkcs7,
        keySize: Type,
        iv: key
    });
    var encrypted = aes.finalize(plainText);
    return C.enc.Base64.stringify(encrypted);
}

var decrypt = function (encryptedText, key) {
    key = String(key + "00000000000000000000000000000000").slice(0, key_size);
    var C = CryptoJS;
    encryptedText = C.enc.Base64.parse(encryptedText);
    key = C.enc.Utf8.parse(key);
    var aes = C.algo.AES.createDecryptor(key, {
        mode: C.mode.CBC,
        padding: C.pad.Pkcs7,
        keySize: Type,
        iv: key
    });
    var decrypted = aes.finalize(encryptedText);
    return C.enc.Utf8.stringify(decrypted);
}

var mqtt = require('mqtt');
var ErrorsByCode = {
    101: 'ClientId should not be null.',
    102: 'Invalid ClientId.',
    103: 'Invalid ClientKey. ClientKey is not registered.',
    104: 'Invalid Uuid. Only alpha numeric,hyphens,@,underscore allowed and maximum length must be 50.',
    105: 'ClientKey is not active.',
    106: 'SSL is not enable.',
    107: 'The maximum connection limit has been reached.',

    108: 'Invalid subscribe channel.',
    109: 'Invalid subscribe channel.ClientKey does not match.',
    110: 'Multiple subscribe channels are not allowed. Multiplexing is not enable.',
    111: 'Invalid subscribe channel. Only alpha numeric,hyphens,@,underscore allowed and maximum length must be 50.',
    125: 'Subscribe is disable for this UUID',

    112: 'Storage is not enable.',
    113: 'Presence is not enable.',
    114: 'Entered history channel has not been subscribed.',

    115: 'Message can not be null.',
    116: 'Invalid publish channel.',
    117: 'Invalid publish channel.ClientKey does not match.',
    118: 'Message count exceeds maximum limit.',
    119: 'Message size exceeds maximum limit.',
    120: 'Invalid publish channel.Only alpha numeric,hyphens,@,underscore allowed and maximum length must be 50.',
    126: 'Publish is disable for this UUID',

    121: 'Invalid UnSubscribe channel.',
    122: 'Invalid UnSubscribe channel.ClientKey does not match.',
    123: 'Invalid UnSubscribe channel.Only alpha numeric,hyphens,@,underscore allowed and maximum length must be 50.',

    124: 'Domain is not Authorized'
};

exports.ConnectToYalgaar = function(YalgaarSetup) {
    if (typeof YalgaarSetup.ClientKey === 'string' && YalgaarSetup.ClientKey && (typeof YalgaarSetup.SSL === 'boolean')) {
        if (!YalgaarSetup.AESSecretKey && YalgaarSetup.AESType || YalgaarSetup.AESSecretKey && !YalgaarSetup.AESType) {
            YalgaarSetup.Error('Both parameters are required : AESSecretKey and AESType');
            return;
        }
        if (YalgaarSetup.AESSecretKey && !typeof YalgaarSetup.AESSecretKey === 'string') {
            YalgaarSetup.Error('Invalid parameter : AESSecretKey');
            return;
        }
        if (YalgaarSetup.AESType && !IsValidAESType(YalgaarSetup.AESType)) {
            YalgaarSetup.Error('Invalid parameter : AESType');
            return;
        }
        Cypherkey = YalgaarSetup.AESSecretKey;

        var l_clientId = YalgaarSetup.ClientKey + "/";
        if (YalgaarSetup.UUID) {
            if (checkregexuser(YalgaarSetup.UUID.toString()) == false) {
                YalgaarSetup.Error(ErrorsByCode[104]);
                return;
            }
            l_clientId += YalgaarSetup.UUID;

        }
        else {
            l_clientId += "User-" + Math.random().toString(16).substr(2, 8);
        }
        var options = {
            clientId: l_clientId
        };
        var l_uri = '';
        if (YalgaarSetup.SSL == true) {
            l_uri = 'mqtts://api.yalgaar.io:8883';
            options.rejectUnauthorized= false;
        }
        else {
            l_uri = 'mqtt://api.yalgaar.io:1883';
        }
        yalgaar = mqtt.connect(l_uri, options);

        yalgaar.on('connect', function (connack) {
            if (parseInt(connack.returnCode) == 0) {
                YalgaarSetup.Callback('Connected Successfully');
            }
            else {
                if (ErrorsByCode[parseInt(connack.returnCode)])
                    YalgaarSetup.Error(ErrorsByCode[parseInt(connack.returnCode)]);
                else
                    YalgaarSetup.Error(parseInt(connack.returnCode));
            }
        });

        yalgaar.on('close', function () {
            YalgaarSetup.Callback('Client Disconnected');
        });

        yalgaar.on('error', function (err) {
            YalgaarSetup.Error(err);
        });
    }
    else {
        YalgaarSetup.Error('Invalid parameter: ClientKey or SSL');
    }
}

exports.SubscribeMessage = function(SubMessageSetup) {
    if (yalgaar.options) {
        if (typeof SubMessageSetup.ChannelName === 'string' && SubMessageSetup.ChannelName) {
            for (var i = 0; i < SubMessageSetup.ChannelName.split(',').length; i++) {
                if (checkregexchannel(SubMessageSetup.ChannelName.split(',')[i].toString()) == false) {
                    SubMessageSetup.Callback('', '', ErrorsByCode[111]);
                    return;
                }
            }

            var l_topic = yalgaar.options.clientId.split('/')[0] + "/";
            for (var i = 0; i < SubMessageSetup.ChannelName.split(',').length; i++) {
                yalgaar.subscribe(l_topic + SubMessageSetup.ChannelName.split(',')[i].toString(), function (err, granted) {
                    if (err) {
                        SubMessageSetup.Callback('', '', err);
                    }
                    if (granted[0].qos == 0) {
                        SubMessageSetup.Callback('', '', 'Subscribe Successfully');
                    }
                    else {
                        if (ErrorsByCode[parseInt(granted[0].qos)])
                            SubMessageSetup.Callback('', '', ErrorsByCode[parseInt(granted[0].qos)]);
                        else
                            SubMessageSetup.Callback('', '', parseInt(granted[0].qos));
                    }
                });
            }

            yalgaar.removeAllListeners('message');
            yalgaar.on('message', function (topic, message) {
                try {
                    var payload = message.toString();
                    var channel = topic.split('/')[1];
                    if (JSON.parse(payload).isPresence == true) {
                        if (SubMessageSetup.CallbackPresence)
                            SubMessageSetup.CallbackPresence(payload, channel, '');
                    }
                    else {
                        if (topic.split('$')[2] != 'users' && topic.split('$')[2] != 'channels' && topic.split('$')[2] != 'history')

                            SubMessageSetup.Callback(YalgaarDecrypt(payload), channel, '');
                    }
                } catch (e) {
                    SubMessageSetup.Callback(YalgaarDecrypt(payload), channel, '');
                }

            });
        }
        else {
            SubMessageSetup.Callback('', '', 'Invalid parameter : ChannelName');
        }
    }
    else {
        SubMessageSetup.Callback('', '', 'Yalgaar connection not found !');
    }
}
exports.PublishMessage = function(PubMessageSetup) {
    if (yalgaar.options) {
        if (typeof PubMessageSetup.ChannelName === 'string' && PubMessageSetup.ChannelName) {
            if (checkregexchannel(PubMessageSetup.ChannelName.toString()) == false) {
                PubMessageSetup.Callback('Invalid publish channel.Only alpha numeric,hyphens,@,underscore allowed and maximum length must be 50');
                return;
            }
            if (typeof PubMessageSetup.Message === 'string' && PubMessageSetup.Message) {
                var encry = YalgaarEncrypt(PubMessageSetup.Message);
                var l_topic = yalgaar.options.clientId.split('/')[0] + "/" + PubMessageSetup.ChannelName;
                yalgaar.publish(l_topic, encry);
            }
            else {
                PubMessageSetup.Callback('Invalid Message');
            }
        }
        else {
            PubMessageSetup.Callback('Invalid parameter : ChannelName');
        }
    }
    else {
        PubMessageSetup.Callback('Yalgaar connection not found !');
    }
}
exports.UnsubscribeMessage = function(UnsubMessageSetup) {
    if (yalgaar.options) {
        if (typeof UnsubMessageSetup.ChannelName === 'string' && UnsubMessageSetup.ChannelName) {
            for (var i = 0; i < UnsubMessageSetup.ChannelName.split(',').length; i++) {
                if (checkregexchannel(UnsubMessageSetup.ChannelName.split(',')[i].toString()) == false) {
                    UnsubMessageSetup.Callback('Invalid un-subscribe channel.Only alpha numeric,hyphens,@,underscore allowed and maximum length must be 50');
                    return;
                }
            }
            var l_topic = yalgaar.options.clientId.split('/')[0] + "/" + UnsubMessageSetup.ChannelName;
            yalgaar.unsubscribe(l_topic, function (err) {
                if (err) {
                    UnsubMessageSetup.Callback(err);
                }
            });

        }
        else {
            UnsubMessageSetup.Callback('Invalid parameter : ChannelName');
        }
    }
    else {
        UnsubMessageSetup.Callback('Yalgaar connection not found !');
    }
}
exports.DisconnectToYalgaar = function () {
    if (yalgaar.options) {
        yalgaar.end();
        yalgaar = {};
    }
    else {
        console.log('Yalgaar connection not found !');
    }
}

exports.GetUUIDList = function(UuidListSetup) {
    if (yalgaar.options) {
        if (typeof UuidListSetup.ChannelName === 'string' && UuidListSetup.ChannelName) {
            if (checkregexchannel(UuidListSetup.ChannelName) == true) {
                var l_topic = yalgaar.options.clientId + "/" + UuidListSetup.ChannelName + "$2$users";
                yalgaar.subscribe(l_topic, function (err, granted) {
                    if (err) {
                        UuidListSetup.Callback(err);
                    }
                    if (granted[0].qos != 0) {
                        if (ErrorsByCode[parseInt(granted[0].qos)])
                            UuidListSetup.Callback('', ErrorsByCode[parseInt(granted[0].qos)]);
                        else
                            UuidListSetup.Callback('', parseInt(granted[0].qos));
                    }
                });
                var l_users = new Array();
                var l_messages = function (topic, message) {
                    try {
                        if (JSON.parse(message).users) {
                            l_users.push.apply(l_users, JSON.parse(message).users.toString().split(','));
                            if (JSON.parse(message).total == JSON.parse(message).range[1]) {
                                yalgaar.unsubscribe(topic);
                                UuidListSetup.Callback(l_users);
                                yalgaar.removeListener('message', l_messages);
                            }
                        }
                    } catch (e) {

                    }
                };
                yalgaar.on('message', l_messages);
            }
            else {
                UuidListSetup.Callback("", 'Invalid channel.Only alpha numeric,hyphens,@,underscore allowed and maximum length must be 50');
            }
        }
        else {
            UuidListSetup.Callback("", 'Invalid parameter : ChannelName');
        }
    }
    else {
        UuidListSetup.Callback("", 'Yalgaar connection not found !');

    }
}
exports.GetChannelList = function(ChannelListSetup) {
    if (yalgaar.options) {
        if (typeof ChannelListSetup.UUID === 'string' && ChannelListSetup.UUID) {
            if (checkregexuser(ChannelListSetup.UUID) == true) {
                var l_topic = yalgaar.options.clientId + "/" + ChannelListSetup.UUID + "$2$channels";
                yalgaar.subscribe(l_topic, function (err, granted) {
                    if (err) {
                        ChannelListSetup.Callback(err);
                    }
                    if (granted[0].qos != 0) {
                        if (ErrorsByCode[parseInt(granted[0].qos)])
                            ChannelListSetup.Callback('', ErrorsByCode[parseInt(granted[0].qos)]);
                        else
                            ChannelListSetup.Callback('', parseInt(granted[0].qos));
                    }
                });
                var l_channels = new Array();
                var l_messages = function (topic, message) {
                    try {
                        if (JSON.parse(message).channels) {
                            l_channels.push.apply(l_channels, JSON.parse(message).channels.toString().split(','));
                            if (JSON.parse(message).total == JSON.parse(message).range[1]) {
                                yalgaar.unsubscribe(topic);
                                ChannelListSetup.Callback(l_channels);
                                yalgaar.removeListener('message', l_messages);
                            }
                        }
                    } catch (e) {

                    }
                };
                yalgaar.on('message', l_messages);
            }
            else {
                ChannelListSetup.Callback("", ErrorsByCode[104]);
            }
        }
        else {
            ChannelListSetup.Callback("", 'Invalid parameter : UUID');
        }
    }
    else {
        ChannelListSetup.Callback("", 'Yalgaar connection not found !');
    }
}
exports.GetHistory = function(HistoryMessageSetup) {
    if (yalgaar.options) {
        if (typeof HistoryMessageSetup.ChannelName === 'string' && HistoryMessageSetup.ChannelName && typeof HistoryMessageSetup.MessageCount === 'number' && HistoryMessageSetup.MessageCount) {
            if (checkregexchannel(HistoryMessageSetup.ChannelName) == true) {
                if (HistoryMessageSetup.MessageCount > 100)
                    HistoryMessageSetup.MessageCount = 100;
                var l_topic = yalgaar.options.clientId + "/" + HistoryMessageSetup.ChannelName + "$" + HistoryMessageSetup.MessageCount + "$history";
                yalgaar.subscribe(l_topic, function (err, granted) {
                    if (err) {
                        HistoryMessageSetup.Callback(err);
                    }
                    if (granted[0].qos != 0) {
                        if (ErrorsByCode[parseInt(granted[0].qos)])
                            HistoryMessageSetup.Callback('', ErrorsByCode[parseInt(granted[0].qos)]);
                        else
                            HistoryMessageSetup.Callback('', parseInt(granted[0].qos));
                    }
                });
                var l_messages = function (topic, message) {
                    yalgaar.unsubscribe(topic);
                    HistoryMessageSetup.Callback(message.toString());
                    yalgaar.removeListener('message', l_messages);
                };
                yalgaar.on('message', l_messages);
            }
            else {
                HistoryMessageSetup.Callback("", 'Invalid channel. Only alpha numeric,hyphens,@,underscore allowed and maximum length must be 50');
            }
        }
        else {
            HistoryMessageSetup.Callback("", 'Invalid parameter : ChannelName or MessageCount');
        }
    }
    else {
        HistoryMessageSetup.Callback("", 'Yalgaar connection not found !');
    }
}

function UniqueId() {
    var text = "";
    var possible = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";

    for (var i = 0; i < 10; i++) {
        text += possible.charAt(Math.floor(Math.random() * possible.length));
    }

    return text;
}

function checkregexchannel(input) {
    var regexp = /^[a-zA-Z0-9-_@]{1,50}$/;
    return (regexp.test(input.trim()));
}

function checkregexuser(input) {
    var regexp = /^[a-zA-Z0-9-_@]{1,50}$/;
    return (regexp.test(input.trim()));
}